{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Exported by architect/package@1.0.42 on 2019-09-08T01:34:22.939Z",
  "Resources": {
    "Microblog": {
      "Type": "AWS::Serverless::Api",
      "Properties": {
        "StageName": "staging",
        "DefinitionBody": {
          "openapi": "3.0.1",
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/about": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAbout.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/login": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLogin.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              },
              "post": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostLogin.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/logout": {
              "post": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostLogout.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/new": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetNew.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/posts/{postID}": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPostsPostID.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              },
              "post": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostPostsPostID.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/posts": {
              "post": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostPosts.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/posts/{postID}/delete": {
              "post": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostPostsPostIDDelete.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/webmention-endpoint": {
              "post": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostWebmentionEndpoint.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/{proxy+}": {
              "x-amazon-apigateway-any-method": {
                "parameters": [
                  {
                    "name": "proxy",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "cacheNamespace": "xlr8r",
                  "cacheKeyParameters": [
                    "method.request.path.proxy"
                  ],
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/_static/{proxy+}": {
              "x-amazon-apigateway-any-method": {
                "parameters": [
                  {
                    "name": "proxy",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": [
                      "http://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}",
                      {
                        "bukkit": {
                          "Ref": "StaticBucket"
                        }
                      }
                    ]
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "requestParameters": {
                    "integration.request.path.proxy": "method.request.path.proxy"
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "ANY",
                  "cacheNamespace": "xlr8r2",
                  "cacheKeyParameters": [
                    "method.request.path.proxy"
                  ],
                  "type": "http_proxy"
                }
              }
            }
          }
        },
        "EndpointConfiguration": "REGIONAL",
        "BinaryMediaTypes": [
          "*~1*"
        ],
        "MinimumCompressionSize": 0
      }
    },
    "GetIndex": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/get-index",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetIndexEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/",
              "Method": "GET",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "GetAbout": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/get-about",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetAboutEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/about",
              "Method": "GET",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "GetLogin": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/get-login",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetLoginEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/login",
              "Method": "GET",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "PostLogin": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/post-login",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "PostLoginEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/login",
              "Method": "POST",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "PostLogout": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/post-logout",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "PostLogoutEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/logout",
              "Method": "POST",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "GetNew": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/get-new",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetNewEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/new",
              "Method": "GET",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "GetPostsPostID": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/get-posts-000postID",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetPostsPostIDEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/posts/{postID}",
              "Method": "GET",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "PostPosts": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/post-posts",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "PostPostsEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/posts",
              "Method": "POST",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "PostPostsPostID": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/post-posts-000postID",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "PostPostsPostIDEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/posts/{postID}",
              "Method": "POST",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "PostPostsPostIDDelete": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/post-posts-000postID-delete",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "PostPostsPostIDDeleteEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/posts/{postID}/delete",
              "Method": "POST",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "PostWebmentionEndpoint": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/post-webmention_endpoint",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "microblog",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "BEGIN_DATA_TABLE_NAME": {
              "Ref": "DataTable"
            },
            "PASSWORD": "asdfasdf"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "PostWebmentionEndpointEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/webmention-endpoint",
              "Method": "POST",
              "RestApiId": {
                "Ref": "Microblog"
              }
            }
          }
        }
      }
    },
    "InvokeProxyPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "GetIndex"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/*",
            {
              "restApiId": {
                "Ref": "Microblog"
              }
            }
          ]
        }
      }
    },
    "StaticBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "PublicRead",
        "WebsiteConfiguration": {
          "IndexDocument": "index.html",
          "ErrorDocument": "404.html"
        }
      }
    },
    "DataTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "scopeID",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "dataID",
            "KeyType": "RANGE"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "scopeID",
            "AttributeType": "S"
          },
          {
            "AttributeName": "dataID",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ArcGlobalPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "ArcStaticBucketPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:PutObjectAcl"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:aws:s3:::${bukkit}",
                        {
                          "bukkit": {
                            "Ref": "StaticBucket"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:aws:s3:::${bukkit}/*",
                        {
                          "bukkit": {
                            "Ref": "StaticBucket"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "ArcDynamoPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}",
                        {
                          "tablename": {
                            "Ref": "DataTable"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*",
                        {
                          "tablename": {
                            "Ref": "DataTable"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/stream/*",
                        {
                          "tablename": {
                            "Ref": "DataTable"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "RoleReflectionPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "Role",
      "Properties": {
        "PolicyName": "ArcRoleReflectionPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "iam:GetRolePolicy",
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:iam::${AWS::AccountId}:role/${role}",
                  {
                    "role": {
                      "Ref": "Role"
                    }
                  }
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    },
    "DataParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": {
          "Fn::Sub": [
            "/${AWS::StackName}/tables/${tablename}",
            {
              "tablename": "data"
            }
          ]
        },
        "Value": {
          "Ref": "DataTable"
        }
      }
    },
    "StaticBucketParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": {
          "Fn::Sub": [
            "/${AWS::StackName}/static/${key}",
            {
              "key": "bucket"
            }
          ]
        },
        "Value": {
          "Ref": "StaticBucket"
        }
      }
    },
    "StaticFingerprintParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": {
          "Fn::Sub": [
            "/${AWS::StackName}/static/${key}",
            {
              "key": "fingerprint"
            }
          ]
        },
        "Value": "false"
      }
    },
    "ParameterStorePolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "Role",
      "Properties": {
        "PolicyName": "ArcParameterStorePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "ssm:GetParametersByPath",
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}",
                  {}
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    }
  },
  "Outputs": {
    "API": {
      "Description": "API Gateway",
      "Value": {
        "Fn::Sub": [
          "https://${restApiId}.execute-api.${AWS::Region}.amazonaws.com/staging",
          {
            "restApiId": {
              "Ref": "Microblog"
            }
          }
        ]
      }
    },
    "restApiId": {
      "Description": "HTTP restApiId",
      "Value": {
        "Ref": "Microblog"
      }
    },
    "BucketURL": {
      "Description": "Bucket URL",
      "Value": {
        "Fn::Sub": [
          "http://${bukkit}.s3-website-${AWS::Region}.amazonaws.com",
          {
            "bukkit": {
              "Ref": "StaticBucket"
            }
          }
        ]
      }
    }
  }
}